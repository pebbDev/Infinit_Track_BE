openapi: 3.0.3
info:
  title: Infinite Track Backend API
  description: |
    Comprehensive API documentation for Infinite Track Backend - Employee Attendance & WFA Management System

    ## Overview
    Infinite Track Backend is a modern attendance management system with smart features including:
    - Employee attendance tracking with geofencing
    - Work From Anywhere (WFA) booking and recommendations
    - Smart auto-checkout with fuzzy logic
    - Automated job processing for alpha generation
    - Comprehensive reporting and analytics

    ## Authentication
    This API uses JWT (JSON Web Token) for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your_jwt_token>
    ```

    ## Timezone
    All timestamps are handled in WIB (Jakarta timezone, UTC+7) for consistency.

    ## Base URL
    - Development: `http://localhost:3005`
    - Production: `https://your-domain.com`

  version: 1.0.0
  contact:
    name: Infinite Track Backend
    email: support@infinitetrack.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3005
    description: Development server
  - url: https://your-domain.com
    description: Production server

security:
  - bearerAuth: []

paths:
  # Health Check
  /health:
    get:
      tags:
        - System
      summary: Health check endpoint
      description: Check if the API server is running and healthy
      security: []
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  timestamp:
                    type: string
                    format: date-time
                    example: '2025-07-05T12:00:00.000Z'

  # Authentication Endpoints
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: 'user@company.com'
                password:
                  type: string
                  format: password
                  example: 'password123'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Login successful'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - full_name
                - role_id
                - position_id
                - division_id
              properties:
                email:
                  type: string
                  format: email
                  example: 'newuser@company.com'
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: 'password123'
                full_name:
                  type: string
                  example: 'John Doe'
                role_id:
                  type: integer
                  example: 2
                position_id:
                  type: integer
                  example: 1
                division_id:
                  type: integer
                  example: 1
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User registered successfully'
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout current user and invalidate token
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Logout successful'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get information about the currently authenticated user
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Attendance Endpoints
  /api/attendance:
    get:
      tags:
        - Attendance
      summary: Get all attendances (Admin/Management only)
      description: Retrieve all attendance records with search and pagination
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search by user name or email
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filter by specific date (YYYY-MM-DD)
        - in: query
          name: user_id
          schema:
            type: integer
          description: Filter by specific user ID
      responses:
        '200':
          description: Attendance records retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      attendances:
                        type: array
                        items:
                          $ref: '#/components/schemas/Attendance'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/attendance/check-in:
    post:
      tags:
        - Attendance
      summary: Check in attendance
      description: Record employee check-in with location verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - latitude
                - longitude
              properties:
                latitude:
                  type: number
                  format: float
                  example: -6.200000
                  description: Latitude coordinate
                longitude:
                  type: number
                  format: float
                  example: 106.816666
                  description: Longitude coordinate
                face_photo:
                  type: string
                  format: binary
                  description: Base64 encoded face photo for verification
      responses:
        '200':
          description: Check-in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Check-in successful'
                  data:
                    $ref: '#/components/schemas/Attendance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/attendance/checkout/{id}:
    post:
      tags:
        - Attendance
      summary: Check out attendance
      description: Record employee check-out and calculate work hours
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Attendance record ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - latitude
                - longitude
              properties:
                latitude:
                  type: number
                  format: float
                  example: -6.200000
                longitude:
                  type: number
                  format: float
                  example: 106.816666
                face_photo:
                  type: string
                  format: binary
                  description: Base64 encoded face photo for verification
      responses:
        '200':
          description: Check-out successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Check-out successful'
                  data:
                    $ref: '#/components/schemas/Attendance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/attendance/history:
    get:
      tags:
        - Attendance
      summary: Get user attendance history
      description: Retrieve attendance history for the current user
      parameters:
        - in: query
          name: month
          schema:
            type: integer
            minimum: 1
            maximum: 12
          description: Filter by month (1-12)
        - in: query
          name: year
          schema:
            type: integer
          description: Filter by year
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
          description: Number of records to return
      responses:
        '200':
          description: Attendance history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attendance'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/attendance/status-today:
    get:
      tags:
        - Attendance
      summary: Get today's attendance status
      description: Get current user's attendance status for today
      responses:
        '200':
          description: Today's attendance status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      has_checked_in:
                        type: boolean
                        example: true
                      has_checked_out:
                        type: boolean
                        example: false
                      attendance:
                        $ref: '#/components/schemas/Attendance'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/attendance/location-event:
    post:
      tags:
        - Attendance
      summary: Log location event
      description: Log geofence enter/exit events for smart attendance tracking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - event_type
                - latitude
                - longitude
              properties:
                event_type:
                  type: string
                  enum: [enter, exit]
                  example: 'enter'
                latitude:
                  type: number
                  format: float
                  example: -6.200000
                longitude:
                  type: number
                  format: float
                  example: 106.816666
                location_name:
                  type: string
                  example: 'Office Building'
      responses:
        '200':
          description: Location event logged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Location event logged successfully'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/attendance/{id}:
    delete:
      tags:
        - Attendance
      summary: Delete attendance record (Admin/Management only)
      description: Delete a specific attendance record
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Attendance record ID
      responses:
        '200':
          description: Attendance record deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Attendance record deleted successfully'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # User Management Endpoints
  /api/users:
    get:
      tags:
        - User Management
      summary: Get all users (Admin/Management only)
      description: Retrieve all users with full profile details
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search by name or email
        - in: query
          name: role_id
          schema:
            type: integer
          description: Filter by role ID
        - in: query
          name: division_id
          schema:
            type: integer
          description: Filter by division ID
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - User Management
      summary: Create new user (Admin/Management only)
      description: Create a new user account with profile details
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - email
                - password
                - full_name
                - role_id
                - position_id
                - division_id
              properties:
                email:
                  type: string
                  format: email
                  example: 'newuser@company.com'
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: 'password123'
                full_name:
                  type: string
                  example: 'John Doe'
                role_id:
                  type: integer
                  example: 2
                position_id:
                  type: integer
                  example: 1
                division_id:
                  type: integer
                  example: 1
                face_photo:
                  type: string
                  format: binary
                  description: Face photo file upload
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User created successfully'
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'

  /api/users/{id}:
    get:
      tags:
        - User Management
      summary: Get user by ID (Admin/Management only)
      description: Retrieve detailed information about a specific user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags:
        - User Management
      summary: Update user (Admin/Management only)
      description: Update user information
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  example: 'John Doe Updated'
                email:
                  type: string
                  format: email
                  example: 'updated@company.com'
                role_id:
                  type: integer
                  example: 3
                position_id:
                  type: integer
                  example: 2
                division_id:
                  type: integer
                  example: 1
                is_active:
                  type: boolean
                  example: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User updated successfully'
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - User Management
      summary: Delete user (Admin/Management only)
      description: Delete a user account
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User deleted successfully'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/users/{id}/photo:
    post:
      tags:
        - User Management
      summary: Upload user face photo (Admin/Management only)
      description: Upload or update user's face photo for facial recognition
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - face_photo
              properties:
                face_photo:
                  type: string
                  format: binary
                  description: Face photo file upload
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Photo uploaded successfully'
                  data:
                    type: object
                    properties:
                      photo_url:
                        type: string
                        example: 'https://cloudinary.com/photo.jpg'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # WFA Booking Endpoints
  /api/bookings:
    get:
      tags:
        - WFA Bookings
      summary: Get all bookings (Admin/Management only)
      description: Retrieve all WFA booking requests with filtering options
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, approved, rejected]
          description: Filter by booking status
        - in: query
          name: date_from
          schema:
            type: string
            format: date
          description: Filter bookings from this date
        - in: query
          name: date_to
          schema:
            type: string
            format: date
          description: Filter bookings until this date
        - in: query
          name: user_id
          schema:
            type: integer
          description: Filter by specific user ID
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - WFA Bookings
      summary: Create WFA booking
      description: Create a new Work From Anywhere booking request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - date
                - location_name
                - latitude
                - longitude
                - reason
              properties:
                date:
                  type: string
                  format: date
                  example: '2025-07-10'
                location_name:
                  type: string
                  example: 'Coffee Shop Downtown'
                latitude:
                  type: number
                  format: float
                  example: -6.200000
                longitude:
                  type: number
                  format: float
                  example: 106.816666
                reason:
                  type: string
                  example: 'Working on client presentation'
                notes:
                  type: string
                  example: 'Will be available 9 AM - 5 PM'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'WFA booking created successfully'
                  data:
                    $ref: '#/components/schemas/Booking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'

  /api/bookings/history:
    get:
      tags:
        - WFA Bookings
      summary: Get booking history with advanced filtering
      description: |
        Retrieve authenticated user's WFA booking history with comprehensive filtering, pagination, and sorting options.
        This endpoint provides rich metadata and flexible querying capabilities for user booking management.
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, approved, rejected]
          description: Filter bookings by status
          example: 'approved'
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page (1-100)
          example: 10
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [created_at, schedule_date, processed_at, status]
            default: created_at
          description: Field to sort by
          example: 'created_at'
        - in: query
          name: sort_order
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
          description: Sort order (ascending or descending)
          example: 'DESC'
      responses:
        '200':
          description: Booking history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/BookingHistoryItem'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
                      filters:
                        type: object
                        properties:
                          status:
                            type: string
                            example: 'approved'
                          sort_by:
                            type: string
                            example: 'created_at'
                          sort_order:
                            type: string
                            example: 'DESC'
                  message:
                    type: string
                    example: 'Riwayat booking berhasil diambil. Ditemukan 25 booking.'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Parameter pagination tidak valid. Page >= 1, limit antara 1-100.'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/bookings/{id}:
    patch:
      tags:
        - WFA Bookings
      summary: Update booking status (Admin/Management only)
      description: Approve or reject a WFA booking request
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Booking ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [approved, rejected]
                  example: 'approved'
                admin_notes:
                  type: string
                  example: 'Approved for client meeting'
      responses:
        '200':
          description: Booking status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Booking status updated successfully'
                  data:
                    $ref: '#/components/schemas/Booking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - WFA Bookings
      summary: Delete booking (Admin/Management only)
      description: Delete a WFA booking request
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Booking ID
      responses:
        '200':
          description: Booking deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Booking deleted successfully'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # WFA Recommendations
  /api/wfa/recommendations:
    get:
      tags:
        - WFA System
      summary: Get WFA recommendations
      description: Get Work From Anywhere location recommendations based on user location using Fuzzy AHP algorithm
      parameters:
        - in: query
          name: latitude
          required: true
          schema:
            type: number
            format: float
          example: -6.200000
          description: User's current latitude
        - in: query
          name: longitude
          required: true
          schema:
            type: number
            format: float
          example: 106.816666
          description: User's current longitude
        - in: query
          name: radius
          schema:
            type: integer
            default: 5000
          description: Search radius in meters
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Maximum number of recommendations
      responses:
        '200':
          description: WFA recommendations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      recommendations:
                        type: array
                        items:
                          $ref: '#/components/schemas/WFARecommendation'
                      search_location:
                        type: object
                        properties:
                          latitude:
                            type: number
                            format: float
                            example: -6.200000
                          longitude:
                            type: number
                            format: float
                            example: 106.816666
                      algorithm_info:
                        type: object
                        properties:
                          method:
                            type: string
                            example: 'Fuzzy AHP'
                          criteria:
                            type: array
                            items:
                              type: string
                            example: ['wifi_quality', 'noise_level', 'amenities', 'distance']
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/wfa/ahp-config:
    get:
      tags:
        - WFA System
      summary: Get AHP configuration
      description: Retrieve current Fuzzy AHP algorithm configuration and criteria weights
      responses:
        '200':
          description: AHP configuration retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      criteria_weights:
                        type: object
                        properties:
                          wifi_quality:
                            type: number
                            format: float
                            example: 0.35
                          noise_level:
                            type: number
                            format: float
                            example: 0.25
                          amenities:
                            type: number
                            format: float
                            example: 0.25
                          distance:
                            type: number
                            format: float
                            example: 0.15
                      fuzzy_scales:
                        type: object
                        description: Fuzzy scale definitions for each criterion
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/wfa/test-ahp:
    post:
      tags:
        - WFA System
      summary: Test Fuzzy AHP algorithm (Admin only)
      description: Test the Fuzzy AHP algorithm with custom values
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                test_locations:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: 'Test Cafe'
                      wifi_quality:
                        type: number
                        format: float
                        example: 4.5
                      noise_level:
                        type: number
                        format: float
                        example: 3.0
                      amenities:
                        type: integer
                        example: 8
                      distance:
                        type: number
                        format: float
                        example: 500.0
                custom_weights:
                  type: object
                  properties:
                    wifi_quality:
                      type: number
                      format: float
                      example: 0.4
                    noise_level:
                      type: number
                      format: float
                      example: 0.3
                    amenities:
                      type: number
                      format: float
                      example: 0.2
                    distance:
                      type: number
                      format: float
                      example: 0.1
      responses:
        '200':
          description: AHP test completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      test_results:
                        type: array
                        items:
                          type: object
                          properties:
                            location:
                              type: string
                              example: 'Test Cafe'
                            score:
                              type: number
                              format: float
                              example: 0.87
                            ranking:
                              type: integer
                              example: 1
                      algorithm_details:
                        type: object
                        description: Detailed algorithm computation results
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Job Management Endpoints
  /api/jobs/status:
    get:
      tags:
        - Job Management
      summary: Get jobs status (Admin only)
      description: Get status and information about all cron jobs
      responses:
        '200':
          description: Jobs status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      jobs:
                        type: array
                        items:
                          $ref: '#/components/schemas/JobStatus'
                      server_info:
                        type: object
                        properties:
                          uptime:
                            type: string
                            example: '2 hours, 15 minutes'
                          timezone:
                            type: string
                            example: 'Asia/Jakarta'
                          current_time:
                            type: string
                            example: '2025-07-05 15:30:00 WIB'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/jobs/trigger/general-alpha:
    post:
      tags:
        - Job Management
      summary: Trigger General Alpha job (Admin only)
      description: Manually trigger the general alpha generation job
      responses:
        '200':
          description: General Alpha job triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'General Alpha job triggered successfully'
                  data:
                    type: object
                    properties:
                      job_id:
                        type: string
                        example: 'general-alpha-20250705-153000'
                      execution_time:
                        type: string
                        example: '2025-07-05 15:30:00 WIB'
                      records_processed:
                        type: integer
                        example: 25
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/jobs/trigger/wfa-bookings:
    post:
      tags:
        - Job Management
      summary: Trigger WFA bookings job (Admin only)
      description: Manually trigger the WFA bookings resolution job
      responses:
        '200':
          description: WFA bookings job triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'WFA bookings job triggered successfully'
                  data:
                    type: object
                    properties:
                      job_id:
                        type: string
                        example: 'wfa-bookings-20250705-153000'
                      execution_time:
                        type: string
                        example: '2025-07-05 15:30:00 WIB'
                      bookings_processed:
                        type: integer
                        example: 5
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/jobs/trigger/auto-checkout:
    post:
      tags:
        - Job Management
      summary: Trigger auto checkout job (Admin only)
      description: Manually trigger the smart auto checkout job
      responses:
        '200':
          description: Auto checkout job triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Auto checkout job triggered successfully'
                  data:
                    type: object
                    properties:
                      job_id:
                        type: string
                        example: 'auto-checkout-20250705-153000'
                      execution_time:
                        type: string
                        example: '2025-07-05 15:30:00 WIB'
                      users_processed:
                        type: integer
                        example: 12
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/jobs/trigger/all:
    post:
      tags:
        - Job Management
      summary: Trigger all jobs (Admin only)
      description: Manually trigger all available jobs in sequence
      responses:
        '200':
          description: All jobs triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'All jobs triggered successfully'
                  data:
                    type: object
                    properties:
                      jobs_executed:
                        type: array
                        items:
                          type: object
                          properties:
                            job_name:
                              type: string
                              example: 'general-alpha'
                            status:
                              type: string
                              example: 'completed'
                            execution_time:
                              type: string
                              example: '2025-07-05 15:30:00 WIB'
                            records_processed:
                              type: integer
                              example: 25
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Summary & Reports Endpoints
  /api/summary:
    get:
      tags:
        - Reports & Analytics
      summary: Get summary report (Admin/Management only)
      description: Get comprehensive attendance and performance summary report
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
          description: Start date for report period (YYYY-MM-DD)
        - in: query
          name: end_date
          schema:
            type: string
            format: date
          description: End date for report period (YYYY-MM-DD)
        - in: query
          name: division_id
          schema:
            type: integer
          description: Filter by specific division
        - in: query
          name: user_id
          schema:
            type: integer
          description: Filter by specific user
        - in: query
          name: report_type
          schema:
            type: string
            enum: [attendance, discipline, wfa, overview]
            default: overview
          description: Type of summary report to generate
      responses:
        '200':
          description: Summary report generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      period:
                        type: object
                        properties:
                          start_date:
                            type: string
                            format: date
                            example: '2025-07-01'
                          end_date:
                            type: string
                            format: date
                            example: '2025-07-31'
                      overview:
                        type: object
                        properties:
                          total_employees:
                            type: integer
                            example: 45
                          total_attendances:
                            type: integer
                            example: 950
                          average_attendance_rate:
                            type: number
                            format: float
                            example: 92.5
                          total_wfa_bookings:
                            type: integer
                            example: 25
                          on_time_percentage:
                            type: number
                            format: float
                            example: 87.3
                      attendance_summary:
                        type: object
                        properties:
                          present_days:
                            type: integer
                            example: 880
                          late_days:
                            type: integer
                            example: 70
                          alpha_days:
                            type: integer
                            example: 15
                          wfa_days:
                            type: integer
                            example: 25
                      discipline_summary:
                        type: object
                        properties:
                          average_discipline_index:
                            type: number
                            format: float
                            example: 8.7
                          top_performers:
                            type: array
                            items:
                              type: object
                              properties:
                                user_id:
                                  type: integer
                                  example: 5
                                full_name:
                                  type: string
                                  example: 'John Doe'
                                discipline_index:
                                  type: number
                                  format: float
                                  example: 9.8
                      charts_data:
                        type: object
                        properties:
                          daily_attendance:
                            type: array
                            items:
                              type: object
                              properties:
                                date:
                                  type: string
                                  format: date
                                  example: '2025-07-05'
                                present:
                                  type: integer
                                  example: 42
                                late:
                                  type: integer
                                  example: 3
                                alpha:
                                  type: integer
                                  example: 0
                          division_performance:
                            type: array
                            items:
                              type: object
                              properties:
                                division_name:
                                  type: string
                                  example: 'Engineering'
                                attendance_rate:
                                  type: number
                                  format: float
                                  example: 95.2
                                average_discipline:
                                  type: number
                                  format: float
                                  example: 9.1
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Discipline Index Endpoints
  /api/discipline/user/{userId}:
    get:
      tags:
        - Discipline Management
      summary: Get user discipline index
      description: Get discipline index and analytics for a specific user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: User ID
        - in: query
          name: period_months
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 12
          description: Number of months to calculate discipline index
        - in: query
          name: include_details
          schema:
            type: boolean
            default: false
          description: Include detailed breakdown of discipline factors
      responses:
        '200':
          description: User discipline index retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      discipline_index:
                        type: number
                        format: float
                        example: 8.7
                        description: Overall discipline index (0-10 scale)
                      period:
                        type: object
                        properties:
                          start_date:
                            type: string
                            format: date
                            example: '2025-04-01'
                          end_date:
                            type: string
                            format: date
                            example: '2025-07-01'
                          months:
                            type: integer
                            example: 3
                      attendance_metrics:
                        type: object
                        properties:
                          total_days:
                            type: integer
                            example: 65
                          present_days:
                            type: integer
                            example: 60
                          late_days:
                            type: integer
                            example: 3
                          alpha_days:
                            type: integer
                            example: 2
                          attendance_rate:
                            type: number
                            format: float
                            example: 92.3
                          punctuality_rate:
                            type: number
                            format: float
                            example: 95.0
                      discipline_factors:
                        type: object
                        properties:
                          consistency_score:
                            type: number
                            format: float
                            example: 9.2
                          punctuality_score:
                            type: number
                            format: float
                            example: 8.8
                          compliance_score:
                            type: number
                            format: float
                            example: 8.1
                          improvement_trend:
                            type: string
                            enum: [improving, stable, declining]
                            example: 'stable'
                      comparison:
                        type: object
                        properties:
                          division_average:
                            type: number
                            format: float
                            example: 8.2
                          company_average:
                            type: number
                            format: float
                            example: 7.9
                          ranking_in_division:
                            type: integer
                            example: 3
                          ranking_in_company:
                            type: integer
                            example: 12
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    /api/discipline/all:
    get:
      tags:
        - Discipline Management
      summary: Get all discipline indices (Admin/Management only)
      description: Get discipline indices for all users with ranking and comparison
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of items per page
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [discipline_index, attendance_rate, punctuality_rate, full_name]
            default: discipline_index
          description: Sort results by specified field
        - in: query
          name: sort_order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
        - in: query
          name: division_id
          schema:
            type: integer
          description: Filter by specific division
        - in: query
          name: min_index
          schema:
            type: number
            format: float
          description: Filter users with discipline index above this value
        - in: query
          name: period_months
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 12
          description: Number of months to calculate discipline index
      responses:
        '200':
          description: Discipline indices retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      discipline_indices:
                        type: array
                        items:
                          type: object
                          properties:
                            user:
                              $ref: '#/components/schemas/User'
                            discipline_index:
                              type: number
                              format: float
                              example: 8.7
                            ranking:
                              type: integer
                              example: 5
                            attendance_rate:
                              type: number
                              format: float
                              example: 92.3
                            punctuality_rate:
                              type: number
                              format: float
                              example: 95.0
                            trend:
                              type: string
                              enum: [improving, stable, declining]
                              example: 'stable'
                      summary:
                        type: object
                        properties:
                          average_index:
                            type: number
                            format: float
                            example: 8.2
                          highest_index:
                            type: number
                            format: float
                            example: 9.8
                          lowest_index:
                            type: number
                            format: float
                            example: 6.5
                          total_users:
                            type: integer
                            example: 45
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/discipline/config:
    get:
      tags:
        - Discipline Management
      summary: Get discipline configuration (Admin/Management only)
      description: Get discipline calculation configuration, weights, and criteria
      responses:
        '200':
          description: Discipline configuration retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      algorithm:
                        type: object
                        properties:
                          name:
                            type: string
                            example: 'Fuzzy AHP'
                          version:
                            type: string
                            example: '2.1'
                          description:
                            type: string
                            example: 'Fuzzy Analytical Hierarchy Process for discipline assessment'
                      criteria_weights:
                        type: object
                        properties:
                          attendance_consistency:
                            type: number
                            format: float
                            example: 0.35
                          punctuality:
                            type: number
                            format: float
                            example: 0.30
                          policy_compliance:
                            type: number
                            format: float
                            example: 0.20
                          improvement_trend:
                            type: number
                            format: float
                            example: 0.15
                      scoring_scales:
                        type: object
                        properties:
                          attendance_rate:
                            type: object
                            properties:
                              excellent:
                                type: string
                                example: '>= 95%'
                              good:
                                type: string
                                example: '90-94%'
                              fair:
                                type: string
                                example: '85-89%'
                              poor:
                                type: string
                                example: '< 85%'
                          punctuality_rate:
                            type: object
                            properties:
                              excellent:
                                type: string
                                example: '>= 98%'
                              good:
                                type: string
                                example: '95-97%'
                              fair:
                                type: string
                                example: '90-94%'
                              poor:
                                type: string
                                example: '< 90%'
                      calculation_period:
                        type: object
                        properties:
                          default_months:
                            type: integer
                            example: 3
                          minimum_data_points:
                            type: integer
                            example: 20
                          update_frequency:
                            type: string
                            example: 'daily'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Advanced Attendance Management Endpoints
  /api/attendance/manual-auto-checkout:
    post:
      tags:
        - Advanced Attendance
      summary: Manual auto checkout (Admin/Management only)
      description: Manually trigger auto checkout for users who forgot to check out
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_ids:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 3]
                  description: Specific user IDs to process (optional - if empty, processes all eligible users)
                date:
                  type: string
                  format: date
                  example: '2025-07-05'
                  description: Date to process (optional - defaults to yesterday)
      responses:
        '200':
          description: Auto checkout completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Auto checkout completed successfully'
                  data:
                    type: object
                    properties:
                      processed_users:
                        type: integer
                        example: 5
                      updated_attendances:
                        type: integer
                        example: 5
                      skipped_users:
                        type: integer
                        example: 2
                      details:
                        type: array
                        items:
                          type: object
                          properties:
                            user_id:
                              type: integer
                              example: 1
                            user_name:
                              type: string
                              example: 'John Doe'
                            status:
                              type: string
                              enum: [updated, skipped, error]
                              example: 'updated'
                            reason:
                              type: string
                              example: 'Auto checkout applied based on location history'
                            checkout_time:
                              type: string
                              format: time
                              example: '17:45:00'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/attendance/setup-auto-checkout:
    post:
      tags:
        - Advanced Attendance
      summary: Setup auto checkout configuration (Admin/Management only)
      description: Configure auto checkout settings and process historical data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enable_auto_checkout:
                  type: boolean
                  example: true
                default_checkout_time:
                  type: string
                  format: time
                  example: '17:30:00'
                smart_prediction:
                  type: boolean
                  example: true
                  description: Enable smart checkout time prediction
                location_based:
                  type: boolean
                  example: true
                  description: Use location history for checkout prediction
                minimum_work_hours:
                  type: number
                  format: float
                  example: 8.0
                maximum_work_hours:
                  type: number
                  format: float
                  example: 10.0
                process_historical_data:
                  type: boolean
                  example: false
                  description: Also process historical incomplete attendance records
      responses:
        '200':
          description: Auto checkout configuration updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Auto checkout configuration updated successfully'
                  data:
                    type: object
                    properties:
                      configuration:
                        type: object
                        properties:
                          enable_auto_checkout:
                            type: boolean
                            example: true
                          default_checkout_time:
                            type: string
                            format: time
                            example: '17:30:00'
                          smart_prediction:
                            type: boolean
                            example: true
                          location_based:
                            type: boolean
                            example: true
                      historical_processing:
                        type: object
                        properties:
                          enabled:
                            type: boolean
                            example: false
                          records_processed:
                            type: integer
                            example: 0
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/attendance/smart-prediction:
    post:
      tags:
        - Advanced Attendance
      summary: Get smart checkout prediction (Admin/Management only)
      description: Get smart checkout time prediction for a user based on historical data and location patterns
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - date
              properties:
                user_id:
                  type: integer
                  example: 1
                date:
                  type: string
                  format: date
                  example: '2025-07-05'
                current_location:
                  type: object
                  properties:
                    latitude:
                      type: number
                      format: float
                      example: -6.200000
                    longitude:
                      type: number
                      format: float
                      example: 106.816666
      responses:
        '200':
          description: Smart prediction generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user_id:
                        type: integer
                        example: 1
                      predicted_checkout_time:
                        type: string
                        format: time
                        example: '17:45:00'
                      confidence_score:
                        type: number
                        format: float
                        example: 0.87
                        description: Prediction confidence (0-1)
                      prediction_method:
                        type: string
                        example: 'fuzzy_logic_with_location'
                      factors:
                        type: object
                        properties:
                          historical_pattern:
                            type: number
                            format: float
                            example: 0.8
                          location_context:
                            type: number
                            format: float
                            example: 0.9
                          day_of_week:
                            type: number
                            format: float
                            example: 0.7
                          work_load_indicator:
                            type: number
                            format: float
                            example: 0.6
                      alternatives:
                        type: array
                        items:
                          type: object
                          properties:
                            time:
                              type: string
                              format: time
                              example: '17:30:00'
                            probability:
                              type: number
                              format: float
                              example: 0.25
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/attendance/test-timezone:
    get:
      tags:
        - Development & Testing
      summary: Test timezone configuration
      description: Test endpoint to verify timezone handling and time formatting
      security: []
      responses:
        '200':
          description: Timezone test results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      server_timezone:
                        type: string
                        example: 'Asia/Jakarta'
                      current_time_utc:
                        type: string
                        format: date-time
                        example: '2025-07-05T08:30:00.000Z'
                      current_time_wib:
                        type: string
                        example: '2025-07-05 15:30:00 WIB'
                      database_timezone:
                        type: string
                        example: '+07:00'
                      test_formatting:
                        type: object
                        properties:
                          time_in_format:
                            type: string
                            example: '15:30:00'
                          date_format:
                            type: string
                            example: '2025-07-05'
                          work_hour_calculation:
                            type: object
                            properties:
                              sample_checkin:
                                type: string
                                example: '09:00:00'
                              sample_checkout:
                                type: string
                                example: '17:30:00'
                              calculated_hours:
                                type: number
                                format: float
                                example: 8.5

  # Reference Data Endpoints
  /api/roles:
    get:
      tags:
        - Reference Data
      summary: Get all roles
      description: Retrieve all available user roles
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/positions:
    get:
      tags:
        - Reference Data
      summary: Get all positions
      description: Retrieve all available job positions
      responses:
        '200':
          description: Positions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Position'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/divisions:
    get:
      tags:
        - Reference Data
      summary: Get all divisions
      description: Retrieve all available company divisions
      responses:
        '200':
          description: Divisions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Division'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/attendance-categories:
    get:
      tags:
        - Reference Data
      summary: Get attendance categories
      description: Retrieve all attendance categories (Alpha, WFA, etc.)
      responses:
        '200':
          description: Attendance categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AttendanceCategory'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/attendance-statuses:
    get:
      tags:
        - Reference Data
      summary: Get attendance statuses
      description: Retrieve all attendance statuses (Present, Late, etc.)
      responses:
        '200':
          description: Attendance statuses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AttendanceStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/locations:
    get:
      tags:
        - Reference Data
      summary: Get all locations
      description: Retrieve all available office locations
      responses:
        '200':
          description: Locations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Location'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication. Include 'Bearer ' prefix.

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: 'user@company.com'
        full_name:
          type: string
          example: 'John Doe'
        is_active:
          type: boolean
          example: true
        photo:
          type: string
          nullable: true
          example: 'https://cloudinary.com/photo.jpg'
        role:
          $ref: '#/components/schemas/Role'
        position:
          $ref: '#/components/schemas/Position'
        division:
          $ref: '#/components/schemas/Division'
        created_at:
          type: string
          format: date-time
          example: '2025-07-01T10:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-07-01T10:00:00.000Z'

    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Admin'
        description:
          type: string
          example: 'System Administrator'

    Position:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Software Engineer'
        description:
          type: string
          example: 'Develops and maintains software applications'

    Division:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Engineering'
        description:
          type: string
          example: 'Software development division'

    Attendance:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        date:
          type: string
          format: date
          example: '2025-07-05'
        time_in:
          type: string
          format: time
          example: '09:00:00'
          description: 'Check-in time in WIB timezone'
        time_out:
          type: string
          format: time
          nullable: true
          example: '17:30:00'
          description: 'Check-out time in WIB timezone'
        work_hour:
          type: number
          format: float
          nullable: true
          example: 8.5
          description: 'Total work hours calculated in decimal format'
        latitude_in:
          type: number
          format: float
          example: -6.200000
        longitude_in:
          type: number
          format: float
          example: 106.816666
        latitude_out:
          type: number
          format: float
          nullable: true
          example: -6.200000
        longitude_out:
          type: number
          format: float
          nullable: true
          example: 106.816666
        photo_in:
          type: string
          nullable: true
          example: 'https://cloudinary.com/checkin_photo.jpg'
        photo_out:
          type: string
          nullable: true
          example: 'https://cloudinary.com/checkout_photo.jpg'
        category:
          $ref: '#/components/schemas/AttendanceCategory'
        status:
          $ref: '#/components/schemas/AttendanceStatus'
        user:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
          example: '2025-07-05T09:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-07-05T17:30:00.000Z'

    AttendanceCategory:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Alpha'
        description:
          type: string
          example: 'Regular office attendance'

    AttendanceStatus:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Present'
        description:
          type: string
          example: 'Employee present on time'

    Location:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Main Office'
        address:
          type: string
          example: 'Jl. Sudirman No. 123, Jakarta'
        latitude:
          type: number
          format: float
          example: -6.200000
        longitude:
          type: number
          format: float
          example: 106.816666
        radius:
          type: integer
          example: 100
          description: 'Geofence radius in meters'

    Booking:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        date:
          type: string
          format: date
          example: '2025-07-10'
        location_name:
          type: string
          example: 'Coffee Shop Downtown'
        latitude:
          type: number
          format: float
          example: -6.200000
        longitude:
          type: number
          format: float
          example: 106.816666
        reason:
          type: string
          example: 'Working on client presentation'
        notes:
          type: string
          nullable: true
          example: 'Will be available 9 AM - 5 PM'
        status:
          type: string
          enum: [pending, approved, rejected]
          example: 'pending'
        admin_notes:
          type: string
          nullable: true
          example: 'Approved for client meeting'
        approved_by:
          type: integer
          nullable: true
          example: 5
        approved_at:
          type: string
          format: date-time
          nullable: true
          example: '2025-07-08T14:30:00.000Z'
        user:
          $ref: '#/components/schemas/User'
        approver:
          allOf:
            - $ref: '#/components/schemas/User'
            - nullable: true
        created_at:
          type: string
          format: date-time
          example: '2025-07-07T10:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-07-08T14:30:00.000Z'

    BookingHistoryItem:
      type: object
      description: Comprehensive booking history item with user details, location info, and status tracking
      properties:
        booking_id:
          type: integer
          example: 123
          description: Unique booking identifier
        user_id:
          type: integer
          example: 20
          description: ID of the user who made the booking
        user_full_name:
          type: string
          example: 'John Doe'
          description: Full name of the user
        user_email:
          type: string
          format: email
          example: 'john.doe@company.com'
          description: Email address of the user
        user_nip_nim:
          type: string
          nullable: true
          example: 'EMP001'
          description: Employee NIP/NIM
        user_position_name:
          type: string
          nullable: true
          example: 'Software Developer'
          description: User's position/job title
        user_role_name:
          type: string
          nullable: true
          example: 'Employee'
          description: User's role in the system
        schedule_date:
          type: string
          format: date
          example: '2025-07-15'
          description: Scheduled WFA date
        status:
          type: string
          enum: [pending, approved, rejected]
          example: 'approved'
          description: Current booking status
        location:
          type: object
          description: WFA location details
          properties:
            location_id:
              type: integer
              example: 45
              description: Unique location identifier
            latitude:
              type: number
              format: float
              example: -6.200000
              description: Location latitude coordinate
            longitude:
              type: number
              format: float
              example: 106.816666
              description: Location longitude coordinate
            radius:
              type: number
              format: float
              example: 100.0
              description: Geofence radius in meters
            description:
              type: string
              example: 'Coffee Shop Downtown - Coworking Space'
              description: Location description
        notes:
          type: string
          nullable: true
          example: 'Working on important client presentation'
          description: User notes for the booking
        suitability_score:
          type: number
          format: float
          nullable: true
          example: 87.5
          description: Location suitability score (0-100) from Fuzzy AHP engine
        suitability_label:
          type: string
          nullable: true
          example: 'Sangat Sesuai'
          description: Human-readable suitability assessment
        created_at:
          type: string
          format: date-time
          example: '2025-07-10T14:30:00.000Z'
          description: Booking creation timestamp
        processed_at:
          type: string
          format: date-time
          nullable: true
          example: '2025-07-11T09:15:00.000Z'
          description: When the booking was approved/rejected
        approved_by:
          type: integer
          nullable: true
          example: 5
          description: ID of admin/management who processed the booking

    JobStatus:
      type: object
      properties:
        name:
          type: string
          example: 'General Alpha Generation'
        cron_schedule:
          type: string
          example: '45 23 * * *'
        description:
          type: string
          example: 'Generates alpha attendance records for users without attendance'
        last_execution:
          type: string
          format: date-time
          nullable: true
          example: '2025-07-04T23:45:00.000Z'
        next_execution:
          type: string
          format: date-time
          example: '2025-07-05T23:45:00.000Z'
        status:
          type: string
          enum: [scheduled, running, completed, failed]
          example: 'scheduled'
        execution_count:
          type: integer
          example: 5
          description: 'Number of times this job has been executed'

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        total_pages:
          type: integer
          example: 10
        total_items:
          type: integer
          example: 95
        items_per_page:
          type: integer
          example: 10
        has_next:
          type: boolean
          example: true
        has_prev:
          type: boolean
          example: false

  responses:
    BadRequest:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: 'Validation failed'
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: 'email'
                    message:
                      type: string
                      example: 'Invalid email format'

    Unauthorized:
      description: Unauthorized - Invalid or missing authentication token
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: 'Unauthorized access'

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: 'Access forbidden - insufficient permissions'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: 'Resource not found'

    Conflict:
      description: Conflict - Resource already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: 'Resource already exists'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: 'Internal server error'
              error:
                type: string
                example: 'Database connection failed'

tags:
  - name: System
    description: System health and status endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Attendance
    description: Employee attendance tracking and management
  - name: Advanced Attendance
    description: Advanced attendance features like auto-checkout and smart predictions
  - name: User Management
    description: User account management (Admin/Management only)
  - name: WFA Bookings
    description: Work From Anywhere booking management
  - name: WFA System
    description: WFA recommendation engine using Fuzzy AHP
  - name: Job Management
    description: Cron job management and manual triggers (Admin only)
  - name: Reports & Analytics
    description: Summary reports and analytics for management
  - name: Discipline Management
    description: Employee discipline index calculation and management
  - name: Reference Data
    description: Master data for roles, positions, divisions, etc.
  - name: Development & Testing
    description: Development and testing endpoints
  - name: Reports & Analytics
    description: Summary and report generation endpoints
  - name: Discipline Management
    description: Discipline index and management endpoints
  - name: Advanced Attendance
    description: Advanced attendance features like manual checkout and smart prediction
  - name: Development & Testing
    description: Development and testing utilities
externalDocs:
  description: Find out more about Infinite Track Backend
  url: https://github.com/your-org/infinite-track-backend
